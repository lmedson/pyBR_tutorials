By: Fernando Masanori

Estrutura de Dados é Amor

http://dontpad.com/EDLove
ou 
http://bit.ly/EDLove

Bloco de notas colaborativo, neste workshop favor somente copiar (CTRL + C) 

Se quiserem entrar com contato comigo:
https://about.me/fmasanori

Material para aprendizagem 0800 (gratuito):
https://www.pycursos.com/python-para-zumbis/
https://github.com/fmasanori/PPZ
https://github.com/fmasanori/treinamento

Palestra Data Structures with Python (PyCon Japan)
https://bit.ly/python-DS
https://youtu.be/6yF5KuOm2LQ?t=224

Instalação, checagem:
Depois de instalar o Python 3.6 ou Python 3.7

Procurar > CMD > enter (terminal no Linux)

para checar se o python está acessível

python -V

No Ubuntu 16:
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt-get update
sudo apt-get install python3.6

No MacOS
https://wsvincent.com/install-python3-mac/

“Ciência da computação não é a ciência dos computadores,
assim como a astronomia não é a ciência dos telescópios.”
— E. W. Dijkstra

Geral de Python (modo interativo)
nome = "Epaminondas"
print (nome)

resposta = 42
print (resposta)

print (nome + " gosta de " + resposta)

print (nome + " gosta de " + str(resposta))

print (f'{nome} gosta de {resposta}')

dir (nome)

help (nome.upper)

print (nome.upper())

import random
dir (random)

help (random.choice)

random.choice(['Aline', 'Virgínia', 'Joana', 'Tayssa'])

random.choice('Aline Virgínia Joana Tayssa'.split())

for nome in 'Aline Virgínia Joana Tayssa'.split():
    print (f'Oi {nome}!')

nomes = 'Aline Virgínia Joana Tayssa'.split()
print (nomes[1:3])'

print (nomes[1:-1])

def anagrama(s1, s2): return sorted(s1) == sorted(s2)
print (anagrama('aberto', 'rebato'))

from random import randint
print ('Bem vindo!')
sorteado = randint(1, 100)
chute = 0
while chute != sorteado:
    chute = int(input ('Chute: '))
    if chute == sorteado:
        print ('Você venceu!')
    else:
        if chute > sorteado:
            print ('Alto')
        else:
            print ('Baixo')
print ('Fim do jogo!')

import random
nomes = '''Júlia Sophia Isabella Manuela Giovanna Alice Laura 
    Luiza Beatriz Mariana Yasmin Gabriela Rafaela Isabelle Lara 
    Letícia Valentina Nicole Sarah Vitória Isadora Lívia Helena 
    Lorena Clara Larissa Emanuelly Heloisa Marina Melissa Gabrielly 
    Eduarda Rebeca Amanda Alícia Bianca Lavínia Fernanda Ester 
    Carolina Emily Cecília Pietra Milena Marcela Laís Natália
    Maria Bruna Camila Luana Catarina Olivia Agatha Mirella
    Sophie Stella Stefany Isabel Kamilly Elisa Luna Eloá Joana
    Mariane Bárbara Juliana Rayssa Alana Caroline Brenda Evelyn
    Débora Raquel Maitê Ana Nina Hadassa Antonella Jennifer
    Betina Mariah Sabrina'''.split()
nomes.sort()
print (' '.join(nomes))
sorteado = random.choice(nomes)
chute = ''
while chute != sorteado:
    chute = input('Chute: ')
    if chute == sorteado:
        print ('Parabéns!')
    elif chute > sorteado:
        print ('Alto')
    else:
print ('Baixo')

class int42(int):
  def __init__(self, n):
    int.__init__(n)
  def __add__(a, b):
    return 42
  def __str__(n):
    return '42'
a = int42(13)
b = int42(7)
print (a + b)
print (a)
print (b)

from functools import wraps
def hitchhiker(func):
  @wraps(func)
  def wrapper(*args, **kwargs): return 42
  return wrapper
@hitchhiker
def fat(n):
  if n < 2: return 1
  return n * fat(n-1)
@hitchhiker
def fib(n):
  if n < 2: return 1
  return fib(n-1) + fib(n-2)
print ('42 is stronger than the apocalypse beast')
print ('Fat(666)=%d' %fat(666))
print ('Fib(666)=%d' %fib(666))

a = 'Co\u00f1o!'
b = 'Con\u0303o!'
print (a, b, a == b, len(a), len(b))
print ()
import unicodedata
print ('Fully Composed')
a1 = unicodedata.normalize('NFC', a)
b1 = unicodedata.normalize('NFC', b)
print (a1, b1, a1 == b1, len(a1), len(b1))
print ()
print ('Fully Decomposed')
a1 = unicodedata.normalize('NFD', a)
b1 = unicodedata.normalize('NFD', b)
print (a1, b1, a1 == b1, len(a1), len(b1))
print ()
s = 'Cleaning Pýtĥöñ'
print (s)
import sys
cmb_chrs = dict.fromkeys(c for c in range(sys.maxunicode)
                         if unicodedata.combining(chr(c)))
s1 = unicodedata.normalize('NFD', s)
print (s1.translate(cmb_chrs))
print ()
print (s)
s1 = unicodedata.normalize('NFD', s)
print (s1.encode('ascii', 'ignore').decode('ascii'), '(ASCII final)')
print ()
s = 'Dígitos árabes: \u0661\u0662\u0663\u0664\u0665\u0666'
print (s)
digitmap = {c: ord('0') + unicodedata.digit(chr(c))
            for c in range(sys.maxunicode)
            if unicodedata.category(chr(c)) == 'Nd'}
print (s.translate(digitmap))

#Modo edição no IDLE ou qualquer editor que queira com python arquivo.py no modo terminal:
# BlueBook code decryption
import sys
def sieve(n):
# Compute primes using sieve of Eratosthenes
  x = [1] * n
  x[1] = 0
  for i in range(2,n//2):
    j = 2 * i
    while j < n:
      x[j] = 0
      j = j+i
  return x
def prime(n, x):
# Find nth prime
  i = 1
  j = 1
  while j <= n:
    if x[i] == 1:
      j = j + 1
    i = i + 1
  return i - 1
# Compute BlueBook unlock code
x = sieve(10000)
code = [1206, 301, 384, 5]
key =[1, 1, 2, 2]
sys.stdout.write(''.join(chr(i) for i in [73,83,66,78,32,61,32]))
for i in range(0, 4):
  sys.stdout.write(str(prime(code[i],x)-key[i]))

#Dado um inteiro n positivo, calcula quantos zeros existem no final (modo edição no IDLE ou qualquer editor que queira com python arquivo.py no modo terminal):
n = 908007000
print (len(str(n)) - len(str(int(str(n)[::-1]))))
print (len(str(n)) - len(str(n).rstrip('0')))
from itertools import takewhile
l = str(n).split('0')
print(len(list(takewhile(lambda x: not x, reversed(l)))))
import re
print(len(re.findall('0*$',str(n))[0]))
f = lambda m: (lambda g: g(m, g))(lambda n, f: 1 + f(n // 10, f) if n % 10 == 0 else 0)
print (f(n))
f = lambda x, y: y if x % 10 != 0 else f(x/10,y+1)
print (f(n, 0))
f = lambda n : 0 if n%10 else 1 + f(n//10)
print (f(n))

“Para entender recursão,
é preciso primeiro entender recursão.”
— folclore

“Ao tentar resolver o problema,
encontrei obstáculos dentro de obstáculos.
Por isso, adotei uma solução recursiva.”
— um aluno

Recursão (modo edição no IDLE ou qualquer editor que queira com python arquivo.py no modo terminal):

instância de um problema = exemplo concreto do problema
cada conjunto de dados de um problema define uma instância
cada instância tem um tamanho
Problema: Calcular a média de dois números, digamos a e b.
Instância: Calcular a média de 123 e 9876.

Problemas que têm estrutura recursiva
Cada instância do problema contém uma instância menor do mesmo problema

Algoritmo recursivo
se a instância em questão é pequena
    resolva-a diretamente
senão
    reduza-a a uma instância menor do mesmo problema
    aplique o método à instância menor
    volte à instância original

fat(n) onde n é um inteiro positivo

pot(x, n) onde x é real e n inteiro positivo

soma dos dígitos de um inteiro n, sd(123) > 6

mdc(a, b) segundo o método de Euclides

inverter uma string s não vazia, inv('abc') > 'cba'

fibonacci tradicional e como otimizar usando ED

fibcache = {}
def fib(n):
  if n <= 2: return 1
  if n in fibcache: return fibcache[n]
  fibcache[n] = fib(n-1) + fib(n-2)
  return fibcache[n]

def negrito(f):
    def envelope(): return f'<b>{f()}</b>'
    return envelope
def itálico(f):
    def envelope(): return f'<i>{f()}</i>'
    return envelope
@negrito
@itálico
def alô(): return 'alô mundo'
print (alô())

from functools import lru_cache
@lru_cache(maxsize=None)
def fib(n):
  if n <= 2: return 1
  return fib(n-1) + fib(n-2)

Exercício dec2bin(n) mostrar a representação binária de n (ok é mais fácil usar bin(n))

#Filas: First In First Out (FIFO)
A = [[0, 1, 0, 0, 0, 0], 
     [0, 0, 1, 0, 0, 0],
     [0, 0, 0, 0, 1, 0],
     [0, 0, 1, 0, 1, 0],
     [1, 0, 0, 0, 0, 0],
     [0, 1, 0, 0, 0, 0]]
def Distancias(n, origem):
  d = [-1] * n
  d[origem] = 0
  f = []
  f.append(origem)
  while len(f) > 0:
    x = f[0]
    del f[0]
    for y in range(n):
      if A[x][y] == 1 and d[y] == -1:
        d[y] = d[x] + 1
        f.append(y)
  return d
print (Distancias(6, 3))

#Pilhas: Last In First Out (LIFO)
def dec2bin(n):
  p = []
  while n:
    p.append(n%2)
    n = n // 2
  while p:
    print (p.pop(), end='')
dec2bin(18)

def dec2binR(n):
  if n == 0: return ''
  return dec2binR(n // 2) + str(n % 2) 
print (dec2binR(18))

def BemFormada(s):
  p = []
  for c in s:
    if c == ')':
      if p[-1] == '(':
        p.pop()
      else:
        return False
    elif c == '}':
      if p[-1] == '{':
        p.pop()
      else:
        return False
    else:
      p.append(c)
  return True
print (BemFormada('((){()})'))
print (BemFormada('({)}'))

Vetores
def busca_sequencial(x, v):
  cont = 0
  for k in range (len(v)):
    if v[k] == x: return cont
    cont += 1
def busca_binaria(x, v):
  cont = 0
  e = -1
  d = len(v)
  while e < d - 1:
    m = (e + d) // 2
    cont += 1
    if v[m] < x:
      e = m
    else:
      d = m
  return cont
v = list(range(1000000))
from random import randint
x = randint(1, 1000000)
print (busca_binaria(x, v))
print (busca_sequencial(x, v))

def selection(v):
  resp = []
  while v:
    m = min(v)
    resp.append(m)
    v.remove(m)
  return resp
from random import shuffle
v = list(range(16))
shuffle(v)
print (v)
print (selection(v))

def inserção(v):
  for j in range(1, len(v)):
    x = v[j]
    i = j - 1
    while i >= 0 and v[i] > x:
      v[i + 1] = v[i]
      i = i - 1
    v[i + 1] = x
  return v
from random import shuffle
v = list(range(16))
shuffle(v)
print (v)
print (inserção(v))
                       
def merge(e, d):
    r = []
    i, j = 0, 0
    while i < len(e) and j < len(d):
        if e[i] <= d[j]:
            r.append(e[i])
            i += 1
        else:
            r.append(d[j])
            j += 1
    r += e[i:]
    r += d[j:]
    return r
def mergesort(v):
    if len(v) <= 1:
        return v
    else:
        m = len(v) // 2
        e = mergesort(v[:m])
        d = mergesort(v[m:])
        return merge(e, d)
print (mergesort([3, 4, 8, 0, 6, 7, 4, 2, 1, 9, 4, 5]))

from heapq import heappush, heappop
def heapsort(v):
  h = []
  for x in v:
    heappush(h, x)
  return [heappop(h) for i in range(len(h))]
from random import shuffle
v = list(range(8))
shuffle(v)
print (v)
print (heapsort(v))

def quicksort(lista):
    if len(lista) <= 1: 
        return lista
    pivô = lista[0]
    iguais  = [x for x in lista if x == pivô]
    menores = [x for x in lista if x <  pivô]
    maiores = [x for x in lista if x >  pivô]
    return quicksort(menores) + iguais + quicksort(maiores)
print (quicksort([2, 7, 0, 3, 4, 9, 8, 1, 5, 6]))

def enumerações(items):
    n = len(items)
    s = [0]*(n+1)
    k = 0
    while True:
        if s[k] < n:
            s[k+1] = s[k] + 1
            k += 1
        else:
            s[k-1] += 1
            k -= 1
        if k == 0:
            break
        else:
            lista = []
            for j in range(1, k+1):
                lista.append(items[s[j]-1])
            yield lista
def combinações(items, n):
    if n==0: yield []
    else:
        for i in range(len(items)):
            for cc in combinações(items[:i]+items[i+1:],n-1):
                yield [items[i]]+cc
def permutações(items):
    return combinações(items, len(items))
print ('Permutações')
for p in permutações(['Adriano','Bruno', 'Diogo', 'Eclis', 'Gabriel', 'Leandro', 'Walber']): print (p)
print ('Enumerações')
for p in enumerações(['Jessica', 'Fernanda', 'Pamela', 'Renata']): print (p)

def boyermoore(p, t):
    m = len(p)
    n = len(t)
    if m > n: return -1
    pulo = [m for k in range(256)]
    for k in range(m - 1):
        pulo[ord(p[k])] = m - k - 1
    pulo = tuple(pulo)
    k = m - 1
    while k < n:
        j = m - 1
        i = k
        while j >= 0 and t[i] == p[j]:
            j -= 1
            i -= 1
        if j == -1: return i + 1
        k += pulo[ord(t[k])]
    return -1
texto = 'os algoritmos de ordenação'
palavra = 'algoritmo'
print (boyermoore(palavra, texto))

g = {}
g[1] = [2, 3, 5]
g[2] = [1, 6, 4]
g[3] = [1, 4, 7]
g[4] = [2, 3, 8]
g[5] = [1, 6, 7]
g[6] = [2, 5, 8]
g[7] = [3, 5, 8]
g[8] = [4, 6, 7]
removidos = [True] + 8 * [False]
def mínimo():
  m = removidos.index(False)
  for v in g:
    if removidos[v]: continue
    if len(g[v]) < len(g[m]):
      m = v
  print ('Mínimo:', m)
  return m
def remove_vizinhos(v):
  removidos[v] = True
  for x in g[v]:
    removidos[x] = True
    g[x] = []
    for y in g:
      if x in g[y]:
        g[y].remove(x)
  print ('G =', g)
  print ('Removidos =', removidos)
s = []
print ('G =', g)
while False in removidos:
  v = mínimo()
  s.append(v)
  remove_vizinhos(v)
print (s)
